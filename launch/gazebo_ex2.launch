<?xml version="1.0"?>
<launch>

 	  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="extra_gazebo_args" default=""/>
  <arg name="gui" default="true"/>
  <arg name="recording" default="false"/>
  <arg name="world" default="world02" />
  <!-- Note that 'headless' is currently non-functional.  See gazebo_ros_pkgs issue #491 (-r arg does not disable
       rendering, but instead enables recording). The arg definition has been left here to prevent breaking downstream
       launch files, but it does nothing. -->
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="physics" default="ode"/>
  <arg name="verbose" default="false"/>
  <arg name="world_name" value="$(find gmapping)/worlds/$(arg world).world"/>
  <arg name="respawn_gazebo" default="false"/>
  <arg name="use_clock_frequency" default="false"/>
  <arg name="pub_clock_frequency" default="100"/>

  <!-- set use_sim_time flag -->
  <param name="/use_sim_time" value="$(arg use_sim_time)"/>

  <!-- set command arguments -->
  <arg unless="$(arg paused)" name="command_arg1" value=""/>
  <arg     if="$(arg paused)" name="command_arg1" value="-u"/>
  <arg unless="$(arg recording)" name="command_arg2" value=""/>
  <arg     if="$(arg recording)" name="command_arg2" value="-r"/>
  <arg unless="$(arg verbose)" name="command_arg3" value=""/>
  <arg     if="$(arg verbose)" name="command_arg3" value="--verbose"/>
  <arg unless="$(arg debug)" name="script_type" value="gzserver"/>
  <arg     if="$(arg debug)" name="script_type" value="debug"/>


  <!-- start gazebo server-->
  <group if="$(arg use_clock_frequency)">
    <param name="gazebo/pub_clock_frequency" value="$(arg pub_clock_frequency)" />
  </group>
  <node name="gazebo" pkg="gazebo_ros" type="$(arg script_type)" respawn="$(arg respawn_gazebo)" output="screen"
	args="$(arg command_arg1) $(arg command_arg2) $(arg command_arg3) -e $(arg physics) $(arg extra_gazebo_args) $(arg world_name)" />
	
  <!-- start gazebo client -->
  <group if="$(arg gui)">
    <node name="gazebo_gui" pkg="gazebo_ros" type="gzclient" respawn="false" output="screen"/>
  </group>
 
  <!-- defining the namespaces of the two robots -->
  <arg name="ns1" value="robot1"/>
  <arg name="ns2" value="robot2"/>


  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="$(arg ns1)/robot_description" 
	 command="$(find xacro)/xacro --inorder $(find gmapping)/urdf/robot2_laser.xacro" />

  <param name="$(arg ns2)/robot_description" 
	 command="$(find xacro)/xacro --inorder $(find gmapping)/urdf/robot2_laser.xacro" />

   <node name="rviz" pkg="rviz" type="rviz" args="-d $(find spawn_example)/config/rviz2.config.rviz" /> 

  <!-- launching the spawner and the controller for robot1 -->
  <group ns="$(arg ns1)">
  <param name="tf_prefix" value="robot1_tf" />
  	<node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
	args="-urdf -model $(arg ns1) -param robot_description -x 1 -y 1 -z 0.05"/>
	 <node name="joint_state_publisher_gui" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui" ></node>
   <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>
	
    <param name="use_sim_time" value="true"/>
    <node pkg="gmapping" type="slam_gmapping" name="slam_gmapping" output="screen">
      <param name="base_frame" value="/robot1_tf/link_chassis"/>
      <param name="odom_frame" value="/robot1_tf/odom"/>
      <param name="map_frame" value="/robot1_tf/map"/>
      <param name="map_update_interval" value="5.0"/>
      <param name="maxUrange" value="16.0"/>
      <param name="sigma" value="0.05"/>
      <param name="kernelSize" value="1"/>
      <param name="lstep" value="0.05"/>
      <param name="astep" value="0.05"/>
      <param name="iterations" value="5"/>
      <param name="lsigma" value="0.075"/>
      <param name="ogain" value="3.0"/>
      <param name="lskip" value="0"/>
      <param name="srr" value="0.1"/>
      <param name="srt" value="0.2"/>
      <param name="str" value="0.1"/>
      <param name="stt" value="0.2"/>
      <param name="linearUpdate" value="1.0"/>
      <param name="angularUpdate" value="0.5"/>
      <param name="temporalUpdate" value="3.0"/>
      <param name="resampleThreshold" value="0.5"/>
      <param name="particles" value="30"/>
      <param name="xmin" value="-50.0"/> 
      <param name="ymin" value="-50.0"/>
      <param name="xmax" value="50.0"/>
      <param name="ymax" value="50.0"/>
      <param name="delta" value="0.05"/>
      <param name="llsamplerange" value="0.01"/>
      <param name="llsamplestep" value="0.01"/>
      <param name="lasamplerange" value="0.005"/>
      <param name="lasamplestep" value="0.005"/>
    </node>
         <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
	<!--<param name="base_global_planner" value="carrot_planner/CarrotPlanner" />-->
	<!--<param name="base_global_planner" value="global_planner/GlobalPlanner" />-->
    <rosparam file="$(find spawn_example)/param/costmap_common_params_1.yaml" command="load" ns="global_costmap"/>
    <rosparam file="$(find spawn_example)/param/costmap_common_params_1.yaml" command="load" ns="local_costmap"/>
    <rosparam file="$(find spawn_example)/param/local_costmap_params_1.yaml" command="load"/>
    <rosparam file="$(find spawn_example)/param/global_costmap_params_1.yaml" command="load"/>
    <rosparam file="$(find spawn_example)/param/base_local_planner_params_1.yaml" command="load"/>
    <rosparam file="$(find spawn_example)/param/move_base_params_1.yaml" command="load"/>	
  </node>  
  </group>

  <!-- launching the spawner and the controller for robot2 -->
  <group ns="$(arg ns2)">
  <param name="tf_prefix" value="robot2_tf" />
   	<node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
	args="-urdf -model $(arg ns2) -param robot_description -x 3 -y 3 -z 0.05"/>
         <node name="joint_state_publisher_gui" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui" ></node>
   <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" /> 

 </group>
 
  <node pkg="amcl" type="amcl" name="amcl" output="screen">
  <param name="use_map_topic" value="true" />
   <param name="odom_model_type" value="diff"/>
  <param name="odom_alpha5" value="0.1"/>
  <param name="gui_publish_rate" value="10.0"/>
  <param name="laser_max_beams" value="30"/>
  <param name="min_particles" value="500"/>
  <param name="max_particles" value="5000"/>
  <param name="kld_err" value="0.05"/>
  <param name="kld_z" value="0.99"/>
  <param name="odom_alpha1" value="0.2"/>
  <param name="odom_alpha2" value="0.2"/>
  <!-- translation std dev, m -->
  <param name="odom_alpha3" value="0.8"/>
  <param name="odom_alpha4" value="0.2"/>
  <param name="laser_z_hit" value="0.5"/>
  <param name="laser_z_short" value="0.05"/>
  <param name="laser_z_max" value="0.05"/>
  <param name="laser_z_rand" value="0.5"/>
  <param name="laser_sigma_hit" value="0.2"/>
  <param name="laser_lambda_short" value="0.1"/>
  <param name="laser_model_type" value="likelihood_field"/>
  <!-- <param name="laser_model_type" value="beam"/> -->
  <param name="laser_likelihood_max_dist" value="2.0"/>
  <param name="update_min_d" value="0.2"/>
  <param name="update_min_a" value="0.5"/>
  <param name="odom_frame_id" value="robot2_tf/odom"/>
  <param name="base_frame_id" value="robot2_tf/link_chassis"/>
  <param name="global_frame_id" value="robot1_tf/map" />
  <param name="resample_interval" value="1"/>
  <param name="transform_tolerance" value="0.1"/>
  <param name="recovery_alpha_slow" value="0.0"/>
  <param name="recovery_alpha_fast" value="0.0"/>
  
         <remap from="scan" to="robot2/scan" />
         <remap from="map" to="robot1/map" />
         <remap from="static_map" to="robot1/dynamic_map" />
         <remap from="/diagnostics" to="robot2/diagnostics" />

        <param name="initial_pose_x" value="3"/>
        <param name="initial_pose_y" value="3"/>
        <param name="initial_pose_a" value="0"/>

     </node>
     
     <group ns="$(arg ns2)">
      <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
	<!--<param name="base_global_planner" value="carrot_planner/CarrotPlanner" />-->
	<!--<param name="base_global_planner" value="global_planner/GlobalPlanner" />-->
    <rosparam file="$(find spawn_example)/param/costmap_common_params_2.yaml" command="load" ns="global_costmap"/>
    <rosparam file="$(find spawn_example)/param/costmap_common_params_2.yaml" command="load" ns="local_costmap"/>
    <rosparam file="$(find spawn_example)/param/local_costmap_params_2b.yaml" command="load"/>
    <rosparam file="$(find spawn_example)/param/global_costmap_params_2b.yaml" command="load"/>
    <rosparam file="$(find spawn_example)/param/base_local_planner_params_2.yaml" command="load"/>
    <rosparam file="$(find spawn_example)/param/move_base_params_2.yaml" command="load"/>	
     </node>  
      </group>
     
 
</launch>
